<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>redutan</title>
    <link rel="alternate" type="text/html" href="http://weblog.youre.space/redutan/" />
    <link rel="self" type="application/atom+xml" href="http://weblog.youre.space/redutan/atom.xml" />
    <id>tag:weblog.youre.space,2018-02-26:/redutan/17</id>
    <updated>2018-02-26T05:53:27Z</updated>
    
    <generator uri="http://www.sixapart.com/movabletype/">Movable Type 6.3.6</generator>

<entry>
    <title>클린소프트웨어 Part 6. ETS 사례 연구</title>
    <link rel="alternate" type="text/html" href="http://weblog.youre.space/redutan/2018/02/000544.html" />
    <id>tag:weblog.youre.space,2018:/redutan//17.544</id>

    <published>2018-02-26T05:53:27Z</published>
    <updated>2018-02-26T05:53:27Z</updated>

    <summary>비지터 패턴 클래스 계층 구조에 새로운 메소드를 추가할 필요가 있지만, 그렇게 하는 작업은 고통스럽거나 설계를 해치게 된다. 디자인 패턴의 비지터 집합 타입 계층 구조를 변경하지 않고도 새로운 메소드를 계층 구조에 추가할 수 있음 비지터(Visitor) 비순환 비지터(Acyclic Visitor) 데코레이터(Decorator) 비지터 패턴...</summary>
    <author>
        <name>Sangyong Gwak</name>
        <uri>http://weblog.youre.space/vergence/</uri>
    </author>
    
    
    <content type="html" xml:lang="en-us" xml:base="http://weblog.youre.space/redutan/">
        <![CDATA[<p>비지터 패턴</p>

<p>클래스 계층 구조에 새로운 메소드를 추가할 필요가 있지만, 그렇게 하는 작업은 고통스럽거나 설계를 해치게 된다.</p>

<p>디자인 패턴의 비지터 집합</p>

<p>타입 계층 구조를 변경하지 않고도 새로운 메소드를 계층 구조에 추가할 수 있음</p>

<p>비지터(Visitor)</p>

<p>비순환 비지터(Acyclic Visitor)</p>

<p>데코레이터(Decorator)</p>

<p>비지터 패턴 상세</p>

<p>이중 디스패치(dual dispatch) : 실행되는 연산이 요청의 종류와 두 수신자의 타입에 따라 달라진다는 뜻</p>

<p>비지터 패턴 클래스 다이어그램</p>

<p>비지터 패턴 시퀀스 다이어그램</p>

<p>연산의 변화 vs 구조의 변화</p>

<p>새로운 구상체가 계속 추가된다면 Visitor은 독이 된다.</p>

<p>새로운 연산이 계속 추가된다면 Vistor은 좋은 선택이다.</p>

<p>비순환 비지터 패턴</p>

<p>down-casting가 있어서 쓰기가 꺼려진다.</p>

<p>타입안정성이 약해짐</p>

<p>만약 generic 을 이용할 수 있다면 더 낫지 않을까?</p>

<p>public void accept ( ModemVisitor v ) {</p>

<p>try {</p>

<p>ErniedModemVisitor ev = ( ErnieModemVisitor ) v ; // !!!</p>

<p>ev . visit ( this );</p>

<p>} catch ( ClassCastException e ) {</p>

<p>}</p>

<p>}</p>

<p>p.505 ErnieModem.java 일부</p>

<p>데코레이터 패턴</p>

<p>소리나는 다이얼 모뎀을 만들고 싶다</p>

<p>OCP, SRP 원칙을 지킬려면 어떻게 해야할까?</p>

<p>데코레이터 !!!</p>

<p>public class LoudDialModem implements Modem {</p>

<p>private Model modem ;</p>

<p>public LoudDialModem ( Modem m ) {</p>

<p>this . modem = m</p>

<p>}</p>

<p>public void dial ( String pno ) {</p>

<p>modem . setSpeakerVolume ( 10 ); // 데코레이팅!!!</p>

<p>modem . dial ( pno )</p>

<p>}</p>

<p>...</p>

<p>}</p>

<p>확장 객체 패턴</p>

<p>아답터 패턴과 유사하다.</p>

<p>단점은 역시나 많은 subclass를 동반하는 것이다.</p>

<p>장점은 OCP와 SRP를 지킬 수 있다</p>

<p>확장 객체 패턴 클래스 다이어그램</p>

<p>참고 : The Extension Objects Pattern.pdf</p>

<p>스테이트 패턴</p>

<p>유한 상태 오토마타의 개괄</p>

<p>유한 상태 기계 : Finite State Machine</p>

<p>ex) 개찰구</p>

<p>개찰구 상태 다이어그램</p>

<p>구현기법 : 중첩된 switch/case</p>

<p>switch ( state ) {</p>

<p>case LOCKED :</p>

<p>switch ( event ) {</p>

<p>case COIN :</p>

<p>state = UNLOCKED ;</p>

<p>turnstileController . unlock ();</p>

<p>break ;</p>

<p>case PASS :</p>

<p>turnstileController . alarm ();</p>

<p>break ;</p>

<p>}</p>

<p>break ;</p>

<p>case UNLOCKED :</p>

<p>switch ( event ) {</p>

<p>case COIN :</p>

<p>turnstileController . thankyou ();</p>

<p>break ;</p>

<p>case PASS :</p>

<p>state = LOCKED ;</p>

<p>turnstileController . lock ();</p>

<p>break ;</p>

<p>}</p>

<p>break ;</p>

<p>}</p>

<p>turnstile : 개찰구</p>

<p>접근제어가 패키지인 상태변수</p>

<p>ISSUE 테스트를 진행할려면 테스트에서 상태를 변경할 수 있어야 한다.</p>

<p>이를 위해서 같은 패키지에서 만들어지는 테스트를 위해서 상태 변수를 패키지 접근제어로 변경하였다.</p>

<p>effective-java에 의하면 패키지 접근제어도 캡슐화가 깨지지 않는 것으로 보이므로 큰 문제가 없다고 판단되며, 본인도 종종 이것을 애용하는 편이다.</p>

<p>하지만 가능했다면, 패키지 생성자나 패키지 setter 메소드로 조금 더 제한하면 좋을 것 같다.</p>

<p>만약 C++이었다면 friend로 해결가능했을 것이다.</p>

<p>중첩된 switch/case의 장단점</p>

<p>간단한 상황에서는 가독성이 높고 효율적</p>

<p>복잡한 상황에서는 가독성이 떨어지고 유지보수도 어려워지며, 실수에 취약하다.</p>

<p>중복코드도 많이 생긴다.</p>

<p>구현기법 : 전이 테이블 해석</p>

<p>// 테이블 구축</p>

<p>public Trunstile ( TurnstileController action ) {</p>

<p>turnstileController = action ;</p>

<p>addTransition ( LOCKED , COIN , UNLOCKED , unlock ()); // 마지막 메서드는 람다식으로 하면 더 나을 것 같다.</p>

<p>addTransition ( LOCKED , PASS , LOCKED , alarm ());</p>

<p>addTransition ( UNLOCKED , COIN , UNLOCKED , thankyou ());</p>

<p>addTransition ( UNLOCKED , PASS , LoCKED , lock ());</p>

<p>}</p>

<p>...</p>

<p>// 전이 엔진</p>

<p>public void event ( int event ) {</p>

<p>for ( Transition transition : transitions ) {</p>

<p>// 아래 분기문은 transition의 메서드로 분기하면 좋을 것 같다. : transition.isTransferable(state, event)</p>

<p>if ( state == transition . currentState && event == transition . event ) {</p>

<p>state = transition . newState ;</p>

<p>transition . action . execute ();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>전이 테이블 해석의 장단점</p>

<p>정규적이며, 가독성이 좋다.</p>

<p>runtime 시 테이블 교체 가능(동적 제어)</p>

<p>ISSUE 테이블의 양이 커지면 검색 시간이 오래 걸린다??</p>

<p>ISSUE 테이블을 지원하기 위한 코드의 양도 많아 진다??</p>

<p>구현기법 : 스테이트 패턴</p>

<p>ISSUE 하지만 예제에서는 Turnstile가 구상상태(TunstileLockedState 등)에 의존하고 있어서 DIP 원칙이 깨지고 있다. - p.544</p>

<p>Gof : 스테이트 패턴</p>

<p>Tcp를 예제로 한 스테이트 패턴 클래스 다이어그램</p>

<p>TCP Established : 연결상태</p>

<p>TCP Listen : 연결대기</p>

<p>TCP Closed : 종료</p>

<p>참고 : TCP 연결 상태 의미</p>

<p>스테이트와 스트래터지</p>

<p>스테이트 : 상태의 다형성 확보</p>

<p>스트래터지 : 알고리즘(행위)의 다형성 확보</p>

<p>context의 상태 변경이 일어나는가?</p>

<p>스테이트 패턴의 장단점</p>

<p>OCP, SRP를 만족할 수 있다.</p>

<p>상태 마다 각각 subclass가 필요해서 비용이 많이 든다.</p>

<p>상태 기계의 모든 논리를 한 번에 파악할 수 없다 (vs 전이 테이블)</p>

<p>상태 기계 컴파일러(SMC)</p>

<p>전이 테이블 + 스테이트 패턴 = 3차원 유한 상태 기계(THREE-LEVEL FINITE STATE MACHINE)</p>

<p>상태 기계 컴파일러 장단점</p>

<p>그냥 좋다. = Best practice</p>

<p>클린소프트웨어 Part 6. ETS 사례 연구 was originally published by MJ at DevOOOOOOOOP on October 08, 2017.</p>

<p>source : http://redutan.github.io/2017/10/08/clean-software-part06</p>

<p>---------------------------------------------------------------------------<br />Visit this link to stop these emails: http://zpr.io/nXidW</p>
]]>
        
    </content>
</entry>

</feed>
